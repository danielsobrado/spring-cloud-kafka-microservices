server:
  port: ${API_GATEWAY_PORT:8080}
  ssl:
    enabled: true
    key-alias: jvmcc
    key-store-password: jvmcc-secret
    key-store: classpath:jvmcc-keystore.p12
    key-store-type: PKCS12
security:
  basicAuth:
    user:
      username: ${API_GATEWAY_USERNAME:jvmcc}
      password: ${API_GATEWAY_PASSWORD:jvmcc}
    admin:
      username: ${API_GATEWAY_ADMIN_USERNAME:admin}
      password: ${API_GATEWAY_ADMIN_PASSWORD:admin}
keycloak:
  realm: ${KEYCLOAK_REALM:jvmcc-service}
  auth-server-url: ${KEYCLOAK_AUTH_SERVER_URL:http://localhost:8084/token-service}
  resource: ${KEYCLOAK_CLIENT_ID:jvmcc-1}
  credentials:
    secret: ${KEYCLOAK_CREDENTIALS_SECRET:xpRFSuPkc0xnJPjx96Y88xYeHSRUySD0}
  ssl-required: ${KEYCLOAK_SSL_REQUIRED:external}
  use-resource-role-mappings: ${KEYCLOAK_USE_RESOURCE_ROLE_MAPPINGS:true}
  bearer-only: ${KEYCLOAK_BEARER_ONLY:true}
com.c4-soft:.springaddons.security:
  issuers:
    - location=${KEYCLOAK_ISSUER_URI:http://localhost:8084/realms/jvmcc-service}
  authorities:
    claims:
      realm_access.roles,resource_access.spring-addons-public.roles,resource_access.spring-addons-confidential.roles
spring:
  main:
    web-application-type: reactive
  application:
    name: ${API_GATEWAY_NAME:jvmcc-api-gateway}
  profiles:
    active: ${SPRING_PROFILE:development}
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${KEYCLOAK_JWK_SET_URI:http://localhost:8084/realms/jvmcc-service/protocol/openid-connect/certs}
      client:
        provider:
          jvmcc-keycloak-provider:
            token-uri: ${KEYCLOAK_TOKEN_URI:http://localhost:8084/realms/jvmcc-service/protocol/openid-connect/token}
            issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8084/realms/jvmcc-service}
        registration:
          keycloak-spring-gateway-client:
            provider: jvmcc-keycloak-provider
            scope: openid
            client-id: ${KEYCLOAK_CLIENT_ID:jvmcc-1}
            client-secret: ${KEYCLOAK_CREDENTIALS_SECRET:xpRFSuPkc0xnJPjx96Y88xYeHSRUySD0}
            authorization-grant-type: password
  cloud:
    config:
      uri: ${CLOUD_CONFIG_URI:optional:configserver:http://localhost:8888}
      username: ${CLOUD_CONFIG_USERNAME:jvmcc}
      password: ${CLOUD_CONFIG_PASSWORD:jvmcc}
    gateway:
      httpserver:
        wiretap: true
      httpclient:
        wiretap: true
        connect-timeout: 2000 # 2s
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      discovery:
        locator:
          enabled: true
      default-filters:
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException
            backoff:
              factor: 2
      routes:
        - id: token-service
          uri: ${TOKEN_SERVICE_URI:http://localhost:8084/jvmcc-service/users}
          predicates:
            - Path=/token-service
            - Method=POST
          filters:
            - SetPath=/realms/jvmcc-service/protocol/openid-connect/token
        - id: jvmcc-product-service
          uri: lb://jvmcc-product-service
          predicates:
            - Path=/product/**
          filters:
            - name: CircuitBreaker
              args:
                name: productCircuitBreaker
                fallbackUri: forward://product-fallback
                enabled: true
        - id: jvmcc-review-service-read
          uri: lb://jvmcc-review-service
          predicates:
            - Method=GET
          filters:
            - name: CircuitBreaker
              args:
                name: reviewCircuitBreaker
                fallbackUri: forward://review-fallback
                enabled: true
        - id: jvmcc-review-service-write
          uri: lb://jvmcc-review-service
          predicates:
            - Path=/review/save/**
            - Path=/review/update/**
            - Path=/review/delete/**
            - Method=PUT
            - Method=POST
            - Method=DELETE
          filters:
            - TokenRelay
            - name: CircuitBreaker
              args:
                name: reviewCircuitBreaker
                fallbackUri: forward://review-fallback
                enabled: true

  config:
    import: ${CLOUD_CONFIG_URI:optional:configserver:http://localhost:8888/}
  zipkin:
    base-url: ${ZIPKIN_SERVER_URL:http://localhost:9411}
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:9000/eureka/}
  instance:
    prefer-ip-address: true
management:
  endpoint:
    gateway:
      enabled: true
  endpoints:
    web:
      exposure:
        include: gateway
logging:
  level:
    reactor:
      netty: INFO
    org:
      springframework:
        cloud:
          gateway: DEBUG
          security:
            web: DEBUG