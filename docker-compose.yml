version: "3.8"
services:
  jvmcc-service-discovery:
    container_name: jvmcc-service-discovery
    image: dalamar/jvmcc-service-discovery:latest
    build:
      context: .
      dockerfile: jvmcc-service-discovery/Dockerfile
    ports:
      - "9000:9000"
    networks:
      - jvmcc-local
  # API Gateway container. This container is the only container exposed to the outside
  jvmcc-api-gateway:
    container_name: jvmcc-api-gateway
    image: dalamar/jvmcc-api-gateway:latest
    build:
      context: .
      dockerfile: jvmcc-api-gateway/Dockerfile
    environment:
      - eureka.client.serviceUrl.defaultZone=http://jvmcc-service-discovery/eureka/
    ports:
      - "8080:8080"
    depends_on:
      - jvmcc-service-discovery
    networks:
      - jvmcc-local
  jvmcc-product-service:
    container_name: jvmcc-product-service
    image: dalamar/jvmcc-product-service:latest
    build:
      context: .
      dockerfile: jvmcc-product-service/Dockerfile
    environment:
        - JAVA_OPTS="-Dspring.profiles.active=docker"
        - SPRING_CONFIG_URI="http://jvmcc-config-server"
    deploy:
        restart_policy:
                condition: on-failure
    depends_on:
      - jvmcc-service-discovery
      - jvmcc-ldap-server
    profiles:
      - non-reactive
    networks:
      - jvmcc-local
  jvmcc-product-reactive-service:
    container_name: jvmcc-product-reactive-service
    image: dalamar/jvmcc-product-reactive-service:latest
    build:
      context: .
      dockerfile: jvmcc-product-reactive-service/Dockerfile
    environment:
        - JAVA_OPTS="-Dspring.profiles.active=docker"
        - SPRING_CONFIG_URI="http://jvmcc-config-server"
    ports:
      - "8081:8081"
    deploy:
        restart_policy:
                condition: on-failure
    depends_on:
      - jvmcc-service-discovery
      - jvmcc-ldap-server
      - zookeeper
      - kafka
    profiles:
      - reactive
    networks:
      - jvmcc-local
  jvmcc-review-service:
    container_name: jvmcc-review-service
    image: dalamar/jvmcc-review-service:latest
    build:
      context: .
      dockerfile: jvmcc-review-service/Dockerfile
    environment:
      - JAVA_OPTS="-Dspring.profiles.active=docker"
      - SPRING_CONFIG_URI="http://jvmcc-config-server"
    ports:
      - "8082:8082"
    deploy:
        restart_policy:
                condition: on-failure
    depends_on:
      - jvmcc-service-discovery
      - jvmcc-mysql
      - jvmcc-ldap-server
    profiles:
      - non-reactive
    networks:
      - jvmcc-local
  jvmcc-review-reactive-service:
    container_name: jvmcc-review-reactive-service
    image: dalamar/jvmcc-review-reactive-service:latest
    build:
      context: .
      dockerfile: jvmcc-review-reactive-service/Dockerfile
    environment:
      - JAVA_OPTS="-Dspring.profiles.active=docker"
      - SPRING_CONFIG_URI="http://jvmcc-config-server"
      - SPRING_DATA_MONGODB_HOST=mongo
    ports:
      - "8082:8082"
    deploy:
        restart_policy:
                condition: on-failure
    depends_on:
      - jvmcc-service-discovery
      - jvmcc-mongodb
      - jvmcc-ldap-server
      - zookeeper
      - kafka
    links:
      - jvmcc-service-discovery
    profiles:
      - reactive
    networks:
      - jvmcc-local
  jvmcc-config-server:
    container_name: jvmcc-config-server
    image: dalamar/jvmcc-config-server:latest
    build:
      context: .
      dockerfile: jvmcc-config-server/Dockerfile
    environment:
      - JAVA_OPTS="-Dspring.profiles.active=docker"
      - SPRING_CONFIG_URI="http://jvmcc-config-server"
    ports:
      - "8888:8888"
    deploy:
        restart_policy:
                condition: on-failure
    depends_on:
      - jvmcc-service-discovery
    links:
      - jvmcc-service-discovery
    networks:
      - jvmcc-local
  zipkin-server:
    container_name: zipkin-server
    image: openzipkin/zipkin:2.21.0
    environment:
      - SPRING_CONFIG_URI="http://zipkin-server"
    ports:
      - "9411:9411"
    deploy:
        restart_policy:
                condition: on-failure
    depends_on:
      - jvmcc-service-discovery
    networks:
      - jvmcc-local
  jvmcc-mysql:
    container_name: jvmcc-mysql
    image: dalamar/jvmcc-mysql
    build:
      context: .
      dockerfile: jvmcc-mysql/Dockerfile
    environment:
        - JAVA_OPTS="-Dspring.profiles.active=docker"
        - SPRING_CONFIG_URI="http://jvmcc-config-server"
        - MYSQL_USER=$${MYSQL_USER:jvmcc}
        - MYSQL_PASSWORD=$${MYSQL_PASSWORD:jvmcc}
        - MYSQL_DATABASE=$${MYSQL_DATABASE:jvmcc}
        - MYSQL_ROOT_PASSWORD=$${MYSQL_ROOT_PASSWORD:root}
        - MYSQL_ROOT_HOST='%'  
    ports:
      - 3306:3306
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_config:/etc/mysql/conf.d
    command: mysqld --init-file="/initSQL.sql"
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD:root}"
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - non-reactive
    networks:
      - jvmcc-local
  jvmcc-mongodb:
    container_name: jvmcc-mongodb
    image: dalamar/jvmcc-mongodb
    build:
      context: .
      dockerfile: jvmcc-mongodb/Dockerfile
    ports:
      - 27017:27017
    volumes:
      - mongodata:/data/db
    profiles:
      - reactive
    networks:
      - jvmcc-local
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    profiles:
      - reactive
    networks:
      - jvmcc-local
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - 9092:9092
    environment:
      KAFKA_LISTENERS: OUTSIDE://kafka:9092,INSIDE://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://kafka:9092,INSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: OUTSIDE:PLAINTEXT,INSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: OUTSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    depends_on:
      - zookeeper
    profiles:
      - reactive
    networks:
      - jvmcc-local
  keycloak:
    image: quay.io/keycloak/keycloak:18.0.2
    container_name: keycloak
    environment:
      - KEYCLOAK_ADMIN=$${KEYCLOAK_ADMIN:jvmcc}
      - KEYCLOAK_ADMIN_PASSWORD=$${KEYCLOAK_ADMIN_PASSWORD:jvmcc}
      - KC_DB=$${KC_DB:mysql}
      - KC_DB_URL_HOST=$${KC_DB_URL_HOST:mysql}
      - KC_DB_URL_DATABASE=$${KC_DB_URL_DATABASE:keycloak}
      - KC_DB_USERNAME=$${KC_DB_USERNAME:keycloak}
      - KC_DB_PASSWORD=$${KC_DB_PASSWORD:password}
    ports:
      - "8080:8084"
    command: start-dev
    depends_on:
      - jvmcc-mysql
    healthcheck:
      test: "curl -f http://localhost:8084/admin || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - donotstart
  jvmcc-ldap-server:
    image: jvmcc-ldap-server
    container_name: jvmcc-ldap-server
    build:
      context: .
      dockerfile: jvmcc-ldap-server/Dockerfile
    environment:
      - LDAP_ORGANISATION="danielsobrado.com"
      - LDAP_DOMAIN=jvmcc.com
    ports:
      - "389:389"
    volumes:
      - ldap_data:/var/lib/ldap
      - ldap_config:/etc/ldap/slapd.d
    networks:
      - jvmcc-local
    profiles:
      - donotstart
volumes:
  mysql_data:
  mysql_config:
  mongodata:
  ldap_data:
  ldap_config:
networks:
  jvmcc-local:
    external: false
      